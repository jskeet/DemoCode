syntax = "proto3";

// Copyright 2019 Jon Skeet. All rights reserved.
// Use of this source code is governed by the Apache License 2.0,
// as found in the LICENSE.txt file.

option csharp_namespace = "VDrumExplorer.Proto";

import "google/protobuf/duration.proto";

message DrumFile
{
    oneof file
	{
	    Module module = 1;
		Kit kit = 2;
		ModuleAudio module_audio = 3;
	}
}

// An identifier for a module, used to match a schema with a file or device.
message ModuleIdentifier
{
    string name = 1;
	int32 model_id = 2;
	int32 family_code = 3;
	int32 family_number_code = 4;
}

// A data for a field container within a module.
message FieldContainerData
{
    // The module address of the start of the container, expressed as a display value (for legacy reasons).
    int32 address = 1;
	bytes data = 2;
}

// Complete data for a module.
message Module
{
    ModuleIdentifier identifier = 1;
	repeated FieldContainerData containers = 2;
}

// A kit within a module. The data will start at the address of the first kit in the
// normal module schema, to be relocated to wherever it needs to be loaded.
message Kit
{
    ModuleIdentifier identifier = 1;
	repeated FieldContainerData containers = 2;
	int32 default_kit_number = 3;
}

// The format of an audio sample. We assume it's always raw data, but
// this specifies mono/stereo, the bits per sample, and the frequency.
message AudioFormat
{
    // The number of channels; 1 for mono, 2 for stereo.
	int32 channels = 1;

	// The number of bits per sample; typically 16.
	int32 bits = 2;

	// The number of samples recorded per second.
	int32 frequency = 3;
}

// A collection of audio captures for the instruments in a module.
message ModuleAudio
{
    // The module that was recorded.
	ModuleIdentifier identifier = 1;

	// The format of the audio captures.
	AudioFormat format = 2;

	// The duration of audio captured per instrument.
	google.protobuf.Duration duration_per_instrument = 3;

	// The audio captures for instruments.
	repeated InstrumentAudio instrument_captures = 4;
}

// Captured audio for a single instrument.
message InstrumentAudio
{
    // The ID of the instrument.
    int32 instrument_id = 1;

	// True for preset instruments; false for user samples.
	bool preset = 2;

	// The audio data for the instrument.
	bytes audio_data = 3;
}
