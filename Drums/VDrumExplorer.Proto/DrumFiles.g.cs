// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DrumFiles.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VDrumExplorer.Proto {

  /// <summary>Holder for reflection information generated from DrumFiles.proto</summary>
  internal static partial class DrumFilesReflection {

    #region Descriptor
    /// <summary>File descriptor for DrumFiles.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DrumFilesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9EcnVtRmlsZXMucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi9kdXJhdGlvbi5w",
            "cm90byJoCghEcnVtRmlsZRIZCgZtb2R1bGUYASABKAsyBy5Nb2R1bGVIABIT",
            "CgNraXQYAiABKAsyBC5LaXRIABIkCgxtb2R1bGVfYXVkaW8YAyABKAsyDC5N",
            "b2R1bGVBdWRpb0gAQgYKBGZpbGUiYwoQTW9kdWxlSWRlbnRpZmllchIMCgRu",
            "YW1lGAEgASgJEhAKCG1vZGVsX2lkGAIgASgFEhMKC2ZhbWlseV9jb2RlGAMg",
            "ASgFEhoKEmZhbWlseV9udW1iZXJfY29kZRgEIAEoBSIzChJGaWVsZENvbnRh",
            "aW5lckRhdGESDwoHYWRkcmVzcxgBIAEoBRIMCgRkYXRhGAIgASgMIlgKBk1v",
            "ZHVsZRIlCgppZGVudGlmaWVyGAEgASgLMhEuTW9kdWxlSWRlbnRpZmllchIn",
            "Cgpjb250YWluZXJzGAIgAygLMhMuRmllbGRDb250YWluZXJEYXRhInEKA0tp",
            "dBIlCgppZGVudGlmaWVyGAEgASgLMhEuTW9kdWxlSWRlbnRpZmllchInCgpj",
            "b250YWluZXJzGAIgAygLMhMuRmllbGRDb250YWluZXJEYXRhEhoKEmRlZmF1",
            "bHRfa2l0X251bWJlchgDIAEoBSJACgtBdWRpb0Zvcm1hdBIQCghjaGFubmVs",
            "cxgBIAEoBRIMCgRiaXRzGAIgASgFEhEKCWZyZXF1ZW5jeRgDIAEoBSK9AQoL",
            "TW9kdWxlQXVkaW8SJQoKaWRlbnRpZmllchgBIAEoCzIRLk1vZHVsZUlkZW50",
            "aWZpZXISHAoGZm9ybWF0GAIgASgLMgwuQXVkaW9Gb3JtYXQSOgoXZHVyYXRp",
            "b25fcGVyX2luc3RydW1lbnQYAyABKAsyGS5nb29nbGUucHJvdG9idWYuRHVy",
            "YXRpb24SLQoTaW5zdHJ1bWVudF9jYXB0dXJlcxgEIAMoCzIQLkluc3RydW1l",
            "bnRBdWRpbyJMCg9JbnN0cnVtZW50QXVkaW8SFQoNaW5zdHJ1bWVudF9pZBgB",
            "IAEoBRIOCgZwcmVzZXQYAiABKAgSEgoKYXVkaW9fZGF0YRgDIAEoDEIWqgIT",
            "VkRydW1FeHBsb3Jlci5Qcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VDrumExplorer.Proto.DrumFile), global::VDrumExplorer.Proto.DrumFile.Parser, new[]{ "Module", "Kit", "ModuleAudio" }, new[]{ "File" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VDrumExplorer.Proto.ModuleIdentifier), global::VDrumExplorer.Proto.ModuleIdentifier.Parser, new[]{ "Name", "ModelId", "FamilyCode", "FamilyNumberCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VDrumExplorer.Proto.FieldContainerData), global::VDrumExplorer.Proto.FieldContainerData.Parser, new[]{ "Address", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VDrumExplorer.Proto.Module), global::VDrumExplorer.Proto.Module.Parser, new[]{ "Identifier", "Containers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VDrumExplorer.Proto.Kit), global::VDrumExplorer.Proto.Kit.Parser, new[]{ "Identifier", "Containers", "DefaultKitNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VDrumExplorer.Proto.AudioFormat), global::VDrumExplorer.Proto.AudioFormat.Parser, new[]{ "Channels", "Bits", "Frequency" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VDrumExplorer.Proto.ModuleAudio), global::VDrumExplorer.Proto.ModuleAudio.Parser, new[]{ "Identifier", "Format", "DurationPerInstrument", "InstrumentCaptures" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VDrumExplorer.Proto.InstrumentAudio), global::VDrumExplorer.Proto.InstrumentAudio.Parser, new[]{ "InstrumentId", "Preset", "AudioData" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class DrumFile : pb::IMessage<DrumFile> {
    private static readonly pb::MessageParser<DrumFile> _parser = new pb::MessageParser<DrumFile>(() => new DrumFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrumFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VDrumExplorer.Proto.DrumFilesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrumFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrumFile(DrumFile other) : this() {
      switch (other.FileCase) {
        case FileOneofCase.Module:
          Module = other.Module.Clone();
          break;
        case FileOneofCase.Kit:
          Kit = other.Kit.Clone();
          break;
        case FileOneofCase.ModuleAudio:
          ModuleAudio = other.ModuleAudio.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrumFile Clone() {
      return new DrumFile(this);
    }

    /// <summary>Field number for the "module" field.</summary>
    public const int ModuleFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VDrumExplorer.Proto.Module Module {
      get { return fileCase_ == FileOneofCase.Module ? (global::VDrumExplorer.Proto.Module) file_ : null; }
      set {
        file_ = value;
        fileCase_ = value == null ? FileOneofCase.None : FileOneofCase.Module;
      }
    }

    /// <summary>Field number for the "kit" field.</summary>
    public const int KitFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VDrumExplorer.Proto.Kit Kit {
      get { return fileCase_ == FileOneofCase.Kit ? (global::VDrumExplorer.Proto.Kit) file_ : null; }
      set {
        file_ = value;
        fileCase_ = value == null ? FileOneofCase.None : FileOneofCase.Kit;
      }
    }

    /// <summary>Field number for the "module_audio" field.</summary>
    public const int ModuleAudioFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VDrumExplorer.Proto.ModuleAudio ModuleAudio {
      get { return fileCase_ == FileOneofCase.ModuleAudio ? (global::VDrumExplorer.Proto.ModuleAudio) file_ : null; }
      set {
        file_ = value;
        fileCase_ = value == null ? FileOneofCase.None : FileOneofCase.ModuleAudio;
      }
    }

    private object file_;
    /// <summary>Enum of possible cases for the "file" oneof.</summary>
    public enum FileOneofCase {
      None = 0,
      Module = 1,
      Kit = 2,
      ModuleAudio = 3,
    }
    private FileOneofCase fileCase_ = FileOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileOneofCase FileCase {
      get { return fileCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFile() {
      fileCase_ = FileOneofCase.None;
      file_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrumFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrumFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Module, other.Module)) return false;
      if (!object.Equals(Kit, other.Kit)) return false;
      if (!object.Equals(ModuleAudio, other.ModuleAudio)) return false;
      if (FileCase != other.FileCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fileCase_ == FileOneofCase.Module) hash ^= Module.GetHashCode();
      if (fileCase_ == FileOneofCase.Kit) hash ^= Kit.GetHashCode();
      if (fileCase_ == FileOneofCase.ModuleAudio) hash ^= ModuleAudio.GetHashCode();
      hash ^= (int) fileCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fileCase_ == FileOneofCase.Module) {
        output.WriteRawTag(10);
        output.WriteMessage(Module);
      }
      if (fileCase_ == FileOneofCase.Kit) {
        output.WriteRawTag(18);
        output.WriteMessage(Kit);
      }
      if (fileCase_ == FileOneofCase.ModuleAudio) {
        output.WriteRawTag(26);
        output.WriteMessage(ModuleAudio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fileCase_ == FileOneofCase.Module) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Module);
      }
      if (fileCase_ == FileOneofCase.Kit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kit);
      }
      if (fileCase_ == FileOneofCase.ModuleAudio) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModuleAudio);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrumFile other) {
      if (other == null) {
        return;
      }
      switch (other.FileCase) {
        case FileOneofCase.Module:
          if (Module == null) {
            Module = new global::VDrumExplorer.Proto.Module();
          }
          Module.MergeFrom(other.Module);
          break;
        case FileOneofCase.Kit:
          if (Kit == null) {
            Kit = new global::VDrumExplorer.Proto.Kit();
          }
          Kit.MergeFrom(other.Kit);
          break;
        case FileOneofCase.ModuleAudio:
          if (ModuleAudio == null) {
            ModuleAudio = new global::VDrumExplorer.Proto.ModuleAudio();
          }
          ModuleAudio.MergeFrom(other.ModuleAudio);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::VDrumExplorer.Proto.Module subBuilder = new global::VDrumExplorer.Proto.Module();
            if (fileCase_ == FileOneofCase.Module) {
              subBuilder.MergeFrom(Module);
            }
            input.ReadMessage(subBuilder);
            Module = subBuilder;
            break;
          }
          case 18: {
            global::VDrumExplorer.Proto.Kit subBuilder = new global::VDrumExplorer.Proto.Kit();
            if (fileCase_ == FileOneofCase.Kit) {
              subBuilder.MergeFrom(Kit);
            }
            input.ReadMessage(subBuilder);
            Kit = subBuilder;
            break;
          }
          case 26: {
            global::VDrumExplorer.Proto.ModuleAudio subBuilder = new global::VDrumExplorer.Proto.ModuleAudio();
            if (fileCase_ == FileOneofCase.ModuleAudio) {
              subBuilder.MergeFrom(ModuleAudio);
            }
            input.ReadMessage(subBuilder);
            ModuleAudio = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An identifier for a module, used to match a schema with a file or device.
  /// </summary>
  internal sealed partial class ModuleIdentifier : pb::IMessage<ModuleIdentifier> {
    private static readonly pb::MessageParser<ModuleIdentifier> _parser = new pb::MessageParser<ModuleIdentifier>(() => new ModuleIdentifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModuleIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VDrumExplorer.Proto.DrumFilesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleIdentifier(ModuleIdentifier other) : this() {
      name_ = other.name_;
      modelId_ = other.modelId_;
      familyCode_ = other.familyCode_;
      familyNumberCode_ = other.familyNumberCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleIdentifier Clone() {
      return new ModuleIdentifier(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 2;
    private int modelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "family_code" field.</summary>
    public const int FamilyCodeFieldNumber = 3;
    private int familyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FamilyCode {
      get { return familyCode_; }
      set {
        familyCode_ = value;
      }
    }

    /// <summary>Field number for the "family_number_code" field.</summary>
    public const int FamilyNumberCodeFieldNumber = 4;
    private int familyNumberCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FamilyNumberCode {
      get { return familyNumberCode_; }
      set {
        familyNumberCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModuleIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModuleIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ModelId != other.ModelId) return false;
      if (FamilyCode != other.FamilyCode) return false;
      if (FamilyNumberCode != other.FamilyNumberCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (FamilyCode != 0) hash ^= FamilyCode.GetHashCode();
      if (FamilyNumberCode != 0) hash ^= FamilyNumberCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ModelId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ModelId);
      }
      if (FamilyCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FamilyCode);
      }
      if (FamilyNumberCode != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FamilyNumberCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (FamilyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FamilyCode);
      }
      if (FamilyNumberCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FamilyNumberCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModuleIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.FamilyCode != 0) {
        FamilyCode = other.FamilyCode;
      }
      if (other.FamilyNumberCode != 0) {
        FamilyNumberCode = other.FamilyNumberCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            ModelId = input.ReadInt32();
            break;
          }
          case 24: {
            FamilyCode = input.ReadInt32();
            break;
          }
          case 32: {
            FamilyNumberCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A data for a field container within a module.
  /// </summary>
  internal sealed partial class FieldContainerData : pb::IMessage<FieldContainerData> {
    private static readonly pb::MessageParser<FieldContainerData> _parser = new pb::MessageParser<FieldContainerData>(() => new FieldContainerData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldContainerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VDrumExplorer.Proto.DrumFilesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldContainerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldContainerData(FieldContainerData other) : this() {
      address_ = other.address_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldContainerData Clone() {
      return new FieldContainerData(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private int address_;
    /// <summary>
    /// The module address of the start of the container, expressed as a display value (for legacy reasons).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldContainerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldContainerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address != 0) hash ^= Address.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Address);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Address);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldContainerData other) {
      if (other == null) {
        return;
      }
      if (other.Address != 0) {
        Address = other.Address;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Address = input.ReadInt32();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Complete data for a module.
  /// </summary>
  internal sealed partial class Module : pb::IMessage<Module> {
    private static readonly pb::MessageParser<Module> _parser = new pb::MessageParser<Module>(() => new Module());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Module> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VDrumExplorer.Proto.DrumFilesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module(Module other) : this() {
      identifier_ = other.identifier_ != null ? other.identifier_.Clone() : null;
      containers_ = other.containers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module Clone() {
      return new Module(this);
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 1;
    private global::VDrumExplorer.Proto.ModuleIdentifier identifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VDrumExplorer.Proto.ModuleIdentifier Identifier {
      get { return identifier_; }
      set {
        identifier_ = value;
      }
    }

    /// <summary>Field number for the "containers" field.</summary>
    public const int ContainersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::VDrumExplorer.Proto.FieldContainerData> _repeated_containers_codec
        = pb::FieldCodec.ForMessage(18, global::VDrumExplorer.Proto.FieldContainerData.Parser);
    private readonly pbc::RepeatedField<global::VDrumExplorer.Proto.FieldContainerData> containers_ = new pbc::RepeatedField<global::VDrumExplorer.Proto.FieldContainerData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VDrumExplorer.Proto.FieldContainerData> Containers {
      get { return containers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Module);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Module other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identifier, other.Identifier)) return false;
      if(!containers_.Equals(other.containers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identifier_ != null) hash ^= Identifier.GetHashCode();
      hash ^= containers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identifier_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identifier);
      }
      containers_.WriteTo(output, _repeated_containers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identifier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identifier);
      }
      size += containers_.CalculateSize(_repeated_containers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Module other) {
      if (other == null) {
        return;
      }
      if (other.identifier_ != null) {
        if (identifier_ == null) {
          Identifier = new global::VDrumExplorer.Proto.ModuleIdentifier();
        }
        Identifier.MergeFrom(other.Identifier);
      }
      containers_.Add(other.containers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identifier_ == null) {
              Identifier = new global::VDrumExplorer.Proto.ModuleIdentifier();
            }
            input.ReadMessage(Identifier);
            break;
          }
          case 18: {
            containers_.AddEntriesFrom(input, _repeated_containers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A kit within a module. The data will start at the address of the first kit in the
  /// normal module schema, to be relocated to wherever it needs to be loaded.
  /// </summary>
  internal sealed partial class Kit : pb::IMessage<Kit> {
    private static readonly pb::MessageParser<Kit> _parser = new pb::MessageParser<Kit>(() => new Kit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Kit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VDrumExplorer.Proto.DrumFilesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kit(Kit other) : this() {
      identifier_ = other.identifier_ != null ? other.identifier_.Clone() : null;
      containers_ = other.containers_.Clone();
      defaultKitNumber_ = other.defaultKitNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kit Clone() {
      return new Kit(this);
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 1;
    private global::VDrumExplorer.Proto.ModuleIdentifier identifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VDrumExplorer.Proto.ModuleIdentifier Identifier {
      get { return identifier_; }
      set {
        identifier_ = value;
      }
    }

    /// <summary>Field number for the "containers" field.</summary>
    public const int ContainersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::VDrumExplorer.Proto.FieldContainerData> _repeated_containers_codec
        = pb::FieldCodec.ForMessage(18, global::VDrumExplorer.Proto.FieldContainerData.Parser);
    private readonly pbc::RepeatedField<global::VDrumExplorer.Proto.FieldContainerData> containers_ = new pbc::RepeatedField<global::VDrumExplorer.Proto.FieldContainerData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VDrumExplorer.Proto.FieldContainerData> Containers {
      get { return containers_; }
    }

    /// <summary>Field number for the "default_kit_number" field.</summary>
    public const int DefaultKitNumberFieldNumber = 3;
    private int defaultKitNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultKitNumber {
      get { return defaultKitNumber_; }
      set {
        defaultKitNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Kit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Kit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identifier, other.Identifier)) return false;
      if(!containers_.Equals(other.containers_)) return false;
      if (DefaultKitNumber != other.DefaultKitNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identifier_ != null) hash ^= Identifier.GetHashCode();
      hash ^= containers_.GetHashCode();
      if (DefaultKitNumber != 0) hash ^= DefaultKitNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identifier_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identifier);
      }
      containers_.WriteTo(output, _repeated_containers_codec);
      if (DefaultKitNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DefaultKitNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identifier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identifier);
      }
      size += containers_.CalculateSize(_repeated_containers_codec);
      if (DefaultKitNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultKitNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Kit other) {
      if (other == null) {
        return;
      }
      if (other.identifier_ != null) {
        if (identifier_ == null) {
          Identifier = new global::VDrumExplorer.Proto.ModuleIdentifier();
        }
        Identifier.MergeFrom(other.Identifier);
      }
      containers_.Add(other.containers_);
      if (other.DefaultKitNumber != 0) {
        DefaultKitNumber = other.DefaultKitNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identifier_ == null) {
              Identifier = new global::VDrumExplorer.Proto.ModuleIdentifier();
            }
            input.ReadMessage(Identifier);
            break;
          }
          case 18: {
            containers_.AddEntriesFrom(input, _repeated_containers_codec);
            break;
          }
          case 24: {
            DefaultKitNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The format of an audio sample. We assume it's always raw data, but
  /// this specifies mono/stereo, the bits per sample, and the frequency.
  /// </summary>
  internal sealed partial class AudioFormat : pb::IMessage<AudioFormat> {
    private static readonly pb::MessageParser<AudioFormat> _parser = new pb::MessageParser<AudioFormat>(() => new AudioFormat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VDrumExplorer.Proto.DrumFilesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioFormat(AudioFormat other) : this() {
      channels_ = other.channels_;
      bits_ = other.bits_;
      frequency_ = other.frequency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioFormat Clone() {
      return new AudioFormat(this);
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 1;
    private int channels_;
    /// <summary>
    /// The number of channels; 1 for mono, 2 for stereo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channels {
      get { return channels_; }
      set {
        channels_ = value;
      }
    }

    /// <summary>Field number for the "bits" field.</summary>
    public const int BitsFieldNumber = 2;
    private int bits_;
    /// <summary>
    /// The number of bits per sample; typically 16.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bits {
      get { return bits_; }
      set {
        bits_ = value;
      }
    }

    /// <summary>Field number for the "frequency" field.</summary>
    public const int FrequencyFieldNumber = 3;
    private int frequency_;
    /// <summary>
    /// The number of samples recorded per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frequency {
      get { return frequency_; }
      set {
        frequency_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Channels != other.Channels) return false;
      if (Bits != other.Bits) return false;
      if (Frequency != other.Frequency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Channels != 0) hash ^= Channels.GetHashCode();
      if (Bits != 0) hash ^= Bits.GetHashCode();
      if (Frequency != 0) hash ^= Frequency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channels != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Channels);
      }
      if (Bits != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Bits);
      }
      if (Frequency != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Frequency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channels);
      }
      if (Bits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bits);
      }
      if (Frequency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frequency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioFormat other) {
      if (other == null) {
        return;
      }
      if (other.Channels != 0) {
        Channels = other.Channels;
      }
      if (other.Bits != 0) {
        Bits = other.Bits;
      }
      if (other.Frequency != 0) {
        Frequency = other.Frequency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Channels = input.ReadInt32();
            break;
          }
          case 16: {
            Bits = input.ReadInt32();
            break;
          }
          case 24: {
            Frequency = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A collection of audio captures for the instruments in a module.
  /// </summary>
  internal sealed partial class ModuleAudio : pb::IMessage<ModuleAudio> {
    private static readonly pb::MessageParser<ModuleAudio> _parser = new pb::MessageParser<ModuleAudio>(() => new ModuleAudio());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModuleAudio> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VDrumExplorer.Proto.DrumFilesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleAudio() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleAudio(ModuleAudio other) : this() {
      identifier_ = other.identifier_ != null ? other.identifier_.Clone() : null;
      format_ = other.format_ != null ? other.format_.Clone() : null;
      durationPerInstrument_ = other.durationPerInstrument_ != null ? other.durationPerInstrument_.Clone() : null;
      instrumentCaptures_ = other.instrumentCaptures_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleAudio Clone() {
      return new ModuleAudio(this);
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 1;
    private global::VDrumExplorer.Proto.ModuleIdentifier identifier_;
    /// <summary>
    /// The module that was recorded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VDrumExplorer.Proto.ModuleIdentifier Identifier {
      get { return identifier_; }
      set {
        identifier_ = value;
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 2;
    private global::VDrumExplorer.Proto.AudioFormat format_;
    /// <summary>
    /// The format of the audio captures.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VDrumExplorer.Proto.AudioFormat Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    /// <summary>Field number for the "duration_per_instrument" field.</summary>
    public const int DurationPerInstrumentFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration durationPerInstrument_;
    /// <summary>
    /// The duration of audio captured per instrument.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration DurationPerInstrument {
      get { return durationPerInstrument_; }
      set {
        durationPerInstrument_ = value;
      }
    }

    /// <summary>Field number for the "instrument_captures" field.</summary>
    public const int InstrumentCapturesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::VDrumExplorer.Proto.InstrumentAudio> _repeated_instrumentCaptures_codec
        = pb::FieldCodec.ForMessage(34, global::VDrumExplorer.Proto.InstrumentAudio.Parser);
    private readonly pbc::RepeatedField<global::VDrumExplorer.Proto.InstrumentAudio> instrumentCaptures_ = new pbc::RepeatedField<global::VDrumExplorer.Proto.InstrumentAudio>();
    /// <summary>
    /// The audio captures for instruments.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VDrumExplorer.Proto.InstrumentAudio> InstrumentCaptures {
      get { return instrumentCaptures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModuleAudio);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModuleAudio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identifier, other.Identifier)) return false;
      if (!object.Equals(Format, other.Format)) return false;
      if (!object.Equals(DurationPerInstrument, other.DurationPerInstrument)) return false;
      if(!instrumentCaptures_.Equals(other.instrumentCaptures_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identifier_ != null) hash ^= Identifier.GetHashCode();
      if (format_ != null) hash ^= Format.GetHashCode();
      if (durationPerInstrument_ != null) hash ^= DurationPerInstrument.GetHashCode();
      hash ^= instrumentCaptures_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identifier_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identifier);
      }
      if (format_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Format);
      }
      if (durationPerInstrument_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DurationPerInstrument);
      }
      instrumentCaptures_.WriteTo(output, _repeated_instrumentCaptures_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identifier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identifier);
      }
      if (format_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Format);
      }
      if (durationPerInstrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DurationPerInstrument);
      }
      size += instrumentCaptures_.CalculateSize(_repeated_instrumentCaptures_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModuleAudio other) {
      if (other == null) {
        return;
      }
      if (other.identifier_ != null) {
        if (identifier_ == null) {
          Identifier = new global::VDrumExplorer.Proto.ModuleIdentifier();
        }
        Identifier.MergeFrom(other.Identifier);
      }
      if (other.format_ != null) {
        if (format_ == null) {
          Format = new global::VDrumExplorer.Proto.AudioFormat();
        }
        Format.MergeFrom(other.Format);
      }
      if (other.durationPerInstrument_ != null) {
        if (durationPerInstrument_ == null) {
          DurationPerInstrument = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        DurationPerInstrument.MergeFrom(other.DurationPerInstrument);
      }
      instrumentCaptures_.Add(other.instrumentCaptures_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identifier_ == null) {
              Identifier = new global::VDrumExplorer.Proto.ModuleIdentifier();
            }
            input.ReadMessage(Identifier);
            break;
          }
          case 18: {
            if (format_ == null) {
              Format = new global::VDrumExplorer.Proto.AudioFormat();
            }
            input.ReadMessage(Format);
            break;
          }
          case 26: {
            if (durationPerInstrument_ == null) {
              DurationPerInstrument = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(DurationPerInstrument);
            break;
          }
          case 34: {
            instrumentCaptures_.AddEntriesFrom(input, _repeated_instrumentCaptures_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Captured audio for a single instrument.
  /// </summary>
  internal sealed partial class InstrumentAudio : pb::IMessage<InstrumentAudio> {
    private static readonly pb::MessageParser<InstrumentAudio> _parser = new pb::MessageParser<InstrumentAudio>(() => new InstrumentAudio());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstrumentAudio> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VDrumExplorer.Proto.DrumFilesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentAudio() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentAudio(InstrumentAudio other) : this() {
      instrumentId_ = other.instrumentId_;
      preset_ = other.preset_;
      audioData_ = other.audioData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentAudio Clone() {
      return new InstrumentAudio(this);
    }

    /// <summary>Field number for the "instrument_id" field.</summary>
    public const int InstrumentIdFieldNumber = 1;
    private int instrumentId_;
    /// <summary>
    /// The ID of the instrument.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstrumentId {
      get { return instrumentId_; }
      set {
        instrumentId_ = value;
      }
    }

    /// <summary>Field number for the "preset" field.</summary>
    public const int PresetFieldNumber = 2;
    private bool preset_;
    /// <summary>
    /// True for preset instruments; false for user samples.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Preset {
      get { return preset_; }
      set {
        preset_ = value;
      }
    }

    /// <summary>Field number for the "audio_data" field.</summary>
    public const int AudioDataFieldNumber = 3;
    private pb::ByteString audioData_ = pb::ByteString.Empty;
    /// <summary>
    /// The audio data for the instrument.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AudioData {
      get { return audioData_; }
      set {
        audioData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstrumentAudio);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstrumentAudio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentId != other.InstrumentId) return false;
      if (Preset != other.Preset) return false;
      if (AudioData != other.AudioData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstrumentId != 0) hash ^= InstrumentId.GetHashCode();
      if (Preset != false) hash ^= Preset.GetHashCode();
      if (AudioData.Length != 0) hash ^= AudioData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstrumentId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InstrumentId);
      }
      if (Preset != false) {
        output.WriteRawTag(16);
        output.WriteBool(Preset);
      }
      if (AudioData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(AudioData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstrumentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstrumentId);
      }
      if (Preset != false) {
        size += 1 + 1;
      }
      if (AudioData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AudioData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstrumentAudio other) {
      if (other == null) {
        return;
      }
      if (other.InstrumentId != 0) {
        InstrumentId = other.InstrumentId;
      }
      if (other.Preset != false) {
        Preset = other.Preset;
      }
      if (other.AudioData.Length != 0) {
        AudioData = other.AudioData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InstrumentId = input.ReadInt32();
            break;
          }
          case 16: {
            Preset = input.ReadBool();
            break;
          }
          case 26: {
            AudioData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
