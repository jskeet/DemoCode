// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DrumFiles.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace VDrumExplorer.Data.Proto {

  /// <summary>Holder for reflection information generated from DrumFiles.proto</summary>
  internal static partial class DrumFilesReflection {

    #region Descriptor
    /// <summary>File descriptor for DrumFiles.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DrumFilesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9EcnVtRmlsZXMucHJvdG8iQgoIRHJ1bUZpbGUSGQoGbW9kdWxlGAEgASgL",
            "MgcuTW9kdWxlSAASEwoDa2l0GAIgASgLMgQuS2l0SABCBgoEZmlsZSJjChBN",
            "b2R1bGVJZGVudGlmaWVyEgwKBG5hbWUYASABKAkSEAoIbW9kZWxfaWQYAiAB",
            "KAUSEwoLZmFtaWx5X2NvZGUYAyABKAUSGgoSZmFtaWx5X251bWJlcl9jb2Rl",
            "GAQgASgFIioKC0RhdGFTZWdtZW50Eg0KBXN0YXJ0GAEgASgFEgwKBGRhdGEY",
            "AiABKAwiTwoGTW9kdWxlEiUKCmlkZW50aWZpZXIYASABKAsyES5Nb2R1bGVJ",
            "ZGVudGlmaWVyEh4KCHNlZ21lbnRzGAIgAygLMgwuRGF0YVNlZ21lbnQiaAoD",
            "S2l0EiUKCmlkZW50aWZpZXIYASABKAsyES5Nb2R1bGVJZGVudGlmaWVyEh4K",
            "CHNlZ21lbnRzGAIgAygLMgwuRGF0YVNlZ21lbnQSGgoSZGVmYXVsdF9raXRf",
            "bnVtYmVyGAMgASgFQhuqAhhWRHJ1bUV4cGxvcmVyLkRhdGEuUHJvdG9iBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::VDrumExplorer.Data.Proto.DrumFile), global::VDrumExplorer.Data.Proto.DrumFile.Parser, new[]{ "Module", "Kit" }, new[]{ "File" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VDrumExplorer.Data.Proto.ModuleIdentifier), global::VDrumExplorer.Data.Proto.ModuleIdentifier.Parser, new[]{ "Name", "ModelId", "FamilyCode", "FamilyNumberCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VDrumExplorer.Data.Proto.DataSegment), global::VDrumExplorer.Data.Proto.DataSegment.Parser, new[]{ "Start", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VDrumExplorer.Data.Proto.Module), global::VDrumExplorer.Data.Proto.Module.Parser, new[]{ "Identifier", "Segments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::VDrumExplorer.Data.Proto.Kit), global::VDrumExplorer.Data.Proto.Kit.Parser, new[]{ "Identifier", "Segments", "DefaultKitNumber" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class DrumFile : pb::IMessage<DrumFile> {
    private static readonly pb::MessageParser<DrumFile> _parser = new pb::MessageParser<DrumFile>(() => new DrumFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrumFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VDrumExplorer.Data.Proto.DrumFilesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrumFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrumFile(DrumFile other) : this() {
      switch (other.FileCase) {
        case FileOneofCase.Module:
          Module = other.Module.Clone();
          break;
        case FileOneofCase.Kit:
          Kit = other.Kit.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrumFile Clone() {
      return new DrumFile(this);
    }

    /// <summary>Field number for the "module" field.</summary>
    public const int ModuleFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VDrumExplorer.Data.Proto.Module Module {
      get { return fileCase_ == FileOneofCase.Module ? (global::VDrumExplorer.Data.Proto.Module) file_ : null; }
      set {
        file_ = value;
        fileCase_ = value == null ? FileOneofCase.None : FileOneofCase.Module;
      }
    }

    /// <summary>Field number for the "kit" field.</summary>
    public const int KitFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VDrumExplorer.Data.Proto.Kit Kit {
      get { return fileCase_ == FileOneofCase.Kit ? (global::VDrumExplorer.Data.Proto.Kit) file_ : null; }
      set {
        file_ = value;
        fileCase_ = value == null ? FileOneofCase.None : FileOneofCase.Kit;
      }
    }

    private object file_;
    /// <summary>Enum of possible cases for the "file" oneof.</summary>
    public enum FileOneofCase {
      None = 0,
      Module = 1,
      Kit = 2,
    }
    private FileOneofCase fileCase_ = FileOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileOneofCase FileCase {
      get { return fileCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFile() {
      fileCase_ = FileOneofCase.None;
      file_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrumFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrumFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Module, other.Module)) return false;
      if (!object.Equals(Kit, other.Kit)) return false;
      if (FileCase != other.FileCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fileCase_ == FileOneofCase.Module) hash ^= Module.GetHashCode();
      if (fileCase_ == FileOneofCase.Kit) hash ^= Kit.GetHashCode();
      hash ^= (int) fileCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fileCase_ == FileOneofCase.Module) {
        output.WriteRawTag(10);
        output.WriteMessage(Module);
      }
      if (fileCase_ == FileOneofCase.Kit) {
        output.WriteRawTag(18);
        output.WriteMessage(Kit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fileCase_ == FileOneofCase.Module) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Module);
      }
      if (fileCase_ == FileOneofCase.Kit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrumFile other) {
      if (other == null) {
        return;
      }
      switch (other.FileCase) {
        case FileOneofCase.Module:
          if (Module == null) {
            Module = new global::VDrumExplorer.Data.Proto.Module();
          }
          Module.MergeFrom(other.Module);
          break;
        case FileOneofCase.Kit:
          if (Kit == null) {
            Kit = new global::VDrumExplorer.Data.Proto.Kit();
          }
          Kit.MergeFrom(other.Kit);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::VDrumExplorer.Data.Proto.Module subBuilder = new global::VDrumExplorer.Data.Proto.Module();
            if (fileCase_ == FileOneofCase.Module) {
              subBuilder.MergeFrom(Module);
            }
            input.ReadMessage(subBuilder);
            Module = subBuilder;
            break;
          }
          case 18: {
            global::VDrumExplorer.Data.Proto.Kit subBuilder = new global::VDrumExplorer.Data.Proto.Kit();
            if (fileCase_ == FileOneofCase.Kit) {
              subBuilder.MergeFrom(Kit);
            }
            input.ReadMessage(subBuilder);
            Kit = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An identifier for a module, used to match a schema with a file or device.
  /// </summary>
  internal sealed partial class ModuleIdentifier : pb::IMessage<ModuleIdentifier> {
    private static readonly pb::MessageParser<ModuleIdentifier> _parser = new pb::MessageParser<ModuleIdentifier>(() => new ModuleIdentifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModuleIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VDrumExplorer.Data.Proto.DrumFilesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleIdentifier(ModuleIdentifier other) : this() {
      name_ = other.name_;
      modelId_ = other.modelId_;
      familyCode_ = other.familyCode_;
      familyNumberCode_ = other.familyNumberCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleIdentifier Clone() {
      return new ModuleIdentifier(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 2;
    private int modelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModelId {
      get { return modelId_; }
      set {
        modelId_ = value;
      }
    }

    /// <summary>Field number for the "family_code" field.</summary>
    public const int FamilyCodeFieldNumber = 3;
    private int familyCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FamilyCode {
      get { return familyCode_; }
      set {
        familyCode_ = value;
      }
    }

    /// <summary>Field number for the "family_number_code" field.</summary>
    public const int FamilyNumberCodeFieldNumber = 4;
    private int familyNumberCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FamilyNumberCode {
      get { return familyNumberCode_; }
      set {
        familyNumberCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModuleIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModuleIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ModelId != other.ModelId) return false;
      if (FamilyCode != other.FamilyCode) return false;
      if (FamilyNumberCode != other.FamilyNumberCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ModelId != 0) hash ^= ModelId.GetHashCode();
      if (FamilyCode != 0) hash ^= FamilyCode.GetHashCode();
      if (FamilyNumberCode != 0) hash ^= FamilyNumberCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ModelId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ModelId);
      }
      if (FamilyCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FamilyCode);
      }
      if (FamilyNumberCode != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FamilyNumberCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelId);
      }
      if (FamilyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FamilyCode);
      }
      if (FamilyNumberCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FamilyNumberCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModuleIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ModelId != 0) {
        ModelId = other.ModelId;
      }
      if (other.FamilyCode != 0) {
        FamilyCode = other.FamilyCode;
      }
      if (other.FamilyNumberCode != 0) {
        FamilyNumberCode = other.FamilyNumberCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            ModelId = input.ReadInt32();
            break;
          }
          case 24: {
            FamilyCode = input.ReadInt32();
            break;
          }
          case 32: {
            FamilyNumberCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A segment of data within a module.
  /// </summary>
  internal sealed partial class DataSegment : pb::IMessage<DataSegment> {
    private static readonly pb::MessageParser<DataSegment> _parser = new pb::MessageParser<DataSegment>(() => new DataSegment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataSegment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VDrumExplorer.Data.Proto.DrumFilesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSegment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSegment(DataSegment other) : this() {
      start_ = other.start_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataSegment Clone() {
      return new DataSegment(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataSegment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataSegment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Start);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataSegment other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Start = input.ReadInt32();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Complete data for a module.
  /// </summary>
  internal sealed partial class Module : pb::IMessage<Module> {
    private static readonly pb::MessageParser<Module> _parser = new pb::MessageParser<Module>(() => new Module());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Module> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VDrumExplorer.Data.Proto.DrumFilesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module(Module other) : this() {
      identifier_ = other.identifier_ != null ? other.identifier_.Clone() : null;
      segments_ = other.segments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module Clone() {
      return new Module(this);
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 1;
    private global::VDrumExplorer.Data.Proto.ModuleIdentifier identifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VDrumExplorer.Data.Proto.ModuleIdentifier Identifier {
      get { return identifier_; }
      set {
        identifier_ = value;
      }
    }

    /// <summary>Field number for the "segments" field.</summary>
    public const int SegmentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::VDrumExplorer.Data.Proto.DataSegment> _repeated_segments_codec
        = pb::FieldCodec.ForMessage(18, global::VDrumExplorer.Data.Proto.DataSegment.Parser);
    private readonly pbc::RepeatedField<global::VDrumExplorer.Data.Proto.DataSegment> segments_ = new pbc::RepeatedField<global::VDrumExplorer.Data.Proto.DataSegment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VDrumExplorer.Data.Proto.DataSegment> Segments {
      get { return segments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Module);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Module other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identifier, other.Identifier)) return false;
      if(!segments_.Equals(other.segments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identifier_ != null) hash ^= Identifier.GetHashCode();
      hash ^= segments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identifier_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identifier);
      }
      segments_.WriteTo(output, _repeated_segments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identifier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identifier);
      }
      size += segments_.CalculateSize(_repeated_segments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Module other) {
      if (other == null) {
        return;
      }
      if (other.identifier_ != null) {
        if (identifier_ == null) {
          Identifier = new global::VDrumExplorer.Data.Proto.ModuleIdentifier();
        }
        Identifier.MergeFrom(other.Identifier);
      }
      segments_.Add(other.segments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identifier_ == null) {
              Identifier = new global::VDrumExplorer.Data.Proto.ModuleIdentifier();
            }
            input.ReadMessage(Identifier);
            break;
          }
          case 18: {
            segments_.AddEntriesFrom(input, _repeated_segments_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A kit within a module. The data will start at the address of the first kit in the
  /// normal module schema, to be relocated to wherever it needs to be loaded.
  /// </summary>
  internal sealed partial class Kit : pb::IMessage<Kit> {
    private static readonly pb::MessageParser<Kit> _parser = new pb::MessageParser<Kit>(() => new Kit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Kit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::VDrumExplorer.Data.Proto.DrumFilesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kit(Kit other) : this() {
      identifier_ = other.identifier_ != null ? other.identifier_.Clone() : null;
      segments_ = other.segments_.Clone();
      defaultKitNumber_ = other.defaultKitNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Kit Clone() {
      return new Kit(this);
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 1;
    private global::VDrumExplorer.Data.Proto.ModuleIdentifier identifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::VDrumExplorer.Data.Proto.ModuleIdentifier Identifier {
      get { return identifier_; }
      set {
        identifier_ = value;
      }
    }

    /// <summary>Field number for the "segments" field.</summary>
    public const int SegmentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::VDrumExplorer.Data.Proto.DataSegment> _repeated_segments_codec
        = pb::FieldCodec.ForMessage(18, global::VDrumExplorer.Data.Proto.DataSegment.Parser);
    private readonly pbc::RepeatedField<global::VDrumExplorer.Data.Proto.DataSegment> segments_ = new pbc::RepeatedField<global::VDrumExplorer.Data.Proto.DataSegment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::VDrumExplorer.Data.Proto.DataSegment> Segments {
      get { return segments_; }
    }

    /// <summary>Field number for the "default_kit_number" field.</summary>
    public const int DefaultKitNumberFieldNumber = 3;
    private int defaultKitNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultKitNumber {
      get { return defaultKitNumber_; }
      set {
        defaultKitNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Kit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Kit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identifier, other.Identifier)) return false;
      if(!segments_.Equals(other.segments_)) return false;
      if (DefaultKitNumber != other.DefaultKitNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identifier_ != null) hash ^= Identifier.GetHashCode();
      hash ^= segments_.GetHashCode();
      if (DefaultKitNumber != 0) hash ^= DefaultKitNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identifier_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identifier);
      }
      segments_.WriteTo(output, _repeated_segments_codec);
      if (DefaultKitNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DefaultKitNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identifier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identifier);
      }
      size += segments_.CalculateSize(_repeated_segments_codec);
      if (DefaultKitNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultKitNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Kit other) {
      if (other == null) {
        return;
      }
      if (other.identifier_ != null) {
        if (identifier_ == null) {
          Identifier = new global::VDrumExplorer.Data.Proto.ModuleIdentifier();
        }
        Identifier.MergeFrom(other.Identifier);
      }
      segments_.Add(other.segments_);
      if (other.DefaultKitNumber != 0) {
        DefaultKitNumber = other.DefaultKitNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identifier_ == null) {
              Identifier = new global::VDrumExplorer.Data.Proto.ModuleIdentifier();
            }
            input.ReadMessage(Identifier);
            break;
          }
          case 18: {
            segments_.AddEntriesFrom(input, _repeated_segments_codec);
            break;
          }
          case 24: {
            DefaultKitNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
