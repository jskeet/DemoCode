using DigiMixer.Core;
using DigiMixer.Diagnostics;
using Newtonsoft.Json;
using System;
using System.Collections.Immutable;

namespace DigiMixer.BehringerWing.Tools;

public class HashesGenerator(string JsonFile, string OutputFile) : Tool
{
    public override Task<int> Execute()
    {
        string json = File.ReadAllText(JsonFile);
        var nameToHash = JsonConvert.DeserializeObject<Dictionary<string, uint>>(json)!;

        var inputPrefixes = Enumerable.Range(1, 40).Select(i => $"ch.{i}")
            .Concat(Enumerable.Range(1, 8).Select(i => $"aux.{i}"))
            .ToList();

        var outputPrefixes = Enumerable.Range(1, 4).Select(i => $"main.{i}")
            .Concat(Enumerable.Range(1, 16).Select(i => $"bus.{i}"))
            .ToList();

        var outputsForInputs = outputPrefixes.Select(op => op.Replace("bus", "send"));

        var inputs = inputPrefixes
            .Select((prefix, index) => new InputChannelHashes(
                ChannelId.Input(index + 1),
                nameToHash[$"{prefix}.$name"],
                nameToHash[$"{prefix}.fdr"],
                nameToHash[$"{prefix}.mute"],
                nameToHash[$"{prefix}.in.set.$mode"],
                [.. outputsForInputs.Select(op => nameToHash[$"{prefix}.{op}.lvl"])]))
            .ToList();

        var outputs = outputPrefixes
                .Select((prefix, index) => new OutputChannelHashes(
                    ChannelId.Output(index + 1),
                    nameToHash[$"{prefix}.name"],
                    nameToHash[$"{prefix}.fdr"],
                    nameToHash[$"{prefix}.mute"]))
                .ToList();

        using var writer = File.CreateText(OutputFile);
        writer.WriteLine("using DigiMixer.Core;");
        writer.WriteLine("using System.Collections.Immutable;");
        writer.WriteLine();
        writer.WriteLine("namespace DigiMixer.BehringerWing;");
        writer.WriteLine();
        writer.WriteLine($"// Autogenerated code - do not edit!");
        writer.WriteLine("internal partial record InputChannelHashes");
        writer.WriteLine("{");
        writer.WriteLine("    internal static ImmutableList<InputChannelHashes> AllInputs { get; } =");
        writer.WriteLine("    [");
        foreach (var input in inputs)
        {
            writer.WriteLine($"        new(ChannelId.Input({input.Id.Value}), {input.Name}, {input.Fader}, {input.Mute}, {input.StereoMode}, [{string.Join(", ", input.OutputLevels)}]),");
        }
        writer.WriteLine("    ];");
        writer.WriteLine();
        writer.WriteLine("    internal static ImmutableDictionary<ChannelId, InputChannelHashes> AllInputsByChannelId { get; } =");
        writer.WriteLine("        InputChannelHashes.AllInputs.ToImmutableDictionary(ch => ch.Id);");
        writer.WriteLine("}");
        writer.WriteLine();
        writer.WriteLine("internal partial record OutputChannelHashes");
        writer.WriteLine("{");
        writer.WriteLine("    internal static ImmutableList<OutputChannelHashes> AllOutputs { get; } =");
        writer.WriteLine("    [");
        foreach (var output in outputs)
        {
            writer.WriteLine($"        new(ChannelId.Output({output.Id.Value}), {output.Name}, {output.Fader}, {output.Mute}),");
        }
        writer.WriteLine("    ];");
        writer.WriteLine();
        writer.WriteLine("    internal static ImmutableDictionary<ChannelId, OutputChannelHashes> AllOutputsByChannelId { get; } =");
        writer.WriteLine("        AllOutputs.ToImmutableDictionary(ch => ch.Id);");
        writer.WriteLine("}");

        return Task.FromResult(0);
    }
}
